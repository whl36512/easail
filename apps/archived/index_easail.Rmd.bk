---
title: "Market Report"
output:
  flexdashboard::flex_dashboard:
    orientation: rows
    contentType: UTF-8
runtime: shiny
---

```{r global, include = FALSE}
library(flexdashboard)
library(RPostgreSQL)
library(DBI)
library(dygraphs)
library(showtext)
library(leaflet)
library(wordcloud2)
library(d3heatmap)
library(maps)
library(reshape2)
library(htmltools)



drv<-dbDriver("PostgreSQL")
db<-dbConnect(drv, host="35.192.79.77",dbname="tao", user="tao", password="tao",  port="5432")
# db<-dbConnect(Postgres(), host="35.192.79.77",dbname="tao", user="tao", password="tao",  port="5432")
knitr::opts_chunk$set(conneciton="db")
```

# Overall

Row 
---------------------------

```{sql, connection=db, output.var="revenue"}
select summary_date, round(sum(net_sale)/10000, 2) net_sale_s
, round(sum(oper_profit)/10000, 2) oper_profit_s
, round(100*sum(oper_profit)/sum(net_sale), 2) grs_profit_r
from salesumhist
where summary_date in ('2016-12-31', '2017-12-31')
group by summary_date
order by summary_date
```

### Revenue (10,000 Yuan)

```{r}
renderValueBox({
if(revenue$net_sale_s[2] > 1.1 * revenue$net_sale_s[1]){
  valueBox(revenue$net_sale_s[2], icon="fa-angle-up", color = "success")
} else if(revenue$net_sale_s[2] < 1.2 * revenue$net_sale_s[1]) {
  valueBox(revenue$net_sale_s[2], icon="fa-angle-down", color = "danger")
} else if(revenue$net_sale_s[2] < 1.1 * revenue$net_sale_s[1]) {
  valueBox(revenue$net_sale_s[2], icon="fa-angle-down", color = "warning")
} else {
  valueBox(revenue$net_sale_s[2])
}
})
```

### Operation Profit (10,000 Yuan)

```{r}
renderValueBox({
if(revenue$oper_profit_s[2] > 1.1 * revenue$oper_profit_s[1]){
  valueBox(revenue$oper_profit_s[2], icon="fa-angle-up", color = "success")
} else if(revenue$oper_profit_s[2] < 1.2 * revenue$oper_profit_s[1]) {
  valueBox(revenue$oper_profit_s[2], icon="fa-angle-down", color = "danger")
} else if(revenue$oper_profit_s[2] < 1.1 * revenue$oper_profit_s[1]) {
  valueBox(revenue$oper_profit_s[2], icon="fa-angle-down", color = "warning")
} else {
  valueBox(revenue$oper_profit_s[2])
}
})
```

### Gross Profit Rate (%)

```{r}
renderValueBox({
if(revenue$grs_profit_r[2] > 1.1 * revenue$grs_profit_r[1]){
  valueBox(revenue$grs_profit_r[2], icon="fa-angle-up", color = "success")
} else if(revenue$grs_profit_r[2] < 1.2 * revenue$grs_profit_r[1]) {
  valueBox(revenue$grs_profit_r[2], icon="fa-angle-down", color = "danger")
} else if(revenue$grs_profit_r[2] < 1.1 * revenue$grs_profit_r[1]) {
  valueBox(revenue$grs_profit_r[2], icon="fa-angle-down", color = "warning")
} else {
  valueBox(revenue$grs_profit_r[2])
}
})
```

Row
---------------------------

### Growth Track

```{sql, connection=db, output.var="growth"}
select summary_date, round(sum(net_sale)/10000, 2) net_sale_s, round(sum(oper_profit)/10000, 2) oper_profit_s, round(100*sum(oper_profit)/sum(net_sale), 2) grs_profit_r
from salesumhist
group by summary_date
order by summary_date
```

```{r}
# st <-c(growth$summary_date[growth$, 1)
gts<-ts(growth$net_sale_s, start=c(2014, 1), frequency = 1)
pts<-ts(growth$oper_profit_s, start=c(2014, 1), frequency = 1)
rts<-ts(growth$grs_profit_r, start=c(2014, 1), frequency = 1)

renderPlot({showtext_auto()})

renderDygraph({dygraph(cbind(gts, pts, rts), elementId = "growth", width="500", height="400") %>%
  dyAxis("y", label="RMB(10000 Yuan)") %>%
  dyAxis("y2", label = "Gross Profit Rate(%)") %>%
  dySeries("gts", label="Revenue") %>%
  dySeries("pts", label="Operation Profit") %>%
  dySeries("rts", label="Gross Profit Rate", axis='y2')
})
```

### Distribution

```{sql, connection=db, output.var="city"}
with sale_city as (
select city, round(sum(net_sale)/10000, 2) net_sale_s
from entity e
	, salesumhist s
where summary_date = '2017-12-31'
and s.customer_name = e.short_name
and city is not null
group by city
)
select s.city, s.city || ' ' || s.net_sale_s net_sale_s, round(longitude,0) longitude, round(latitude,0) latitude
from sale_city s left outer join city c on ( s.city = c.name )
order by net_sale_s desc;
```

```{r, width=50, height=40}
mp=map("world", "China", fill=TRUE, plot=FALSE)
renderLeaflet({leaflet(data=mp, options=leafletOptions(minZoom = 3, maxZoom = 6))%>%
  addTiles()%>%
  addPolygons(fillColor = topo.colors(10, alpha = NULL), stroke=FALSE)%>%
  addMarkers(city$longitude, city$latitude, popup=htmlEscape(as.character(city$net_sale_s)), clusterOptions = markerClusterOptions())
})

```

Row
---------------------------

### Channel

```{sql, connection=db, output.var="bc"}
with brand as (
select brand
from salesumhist s
	, product p
where summary_date = '2017-12-31'
and s.product_name = p.product_name
and net_sale is not null
group by brand
order by sum(net_sale) desc
limit 10
)
, bchannel as (
select b.brand, e.channel, sum(net_sale) net_sale_s
from brand b
	, salesumhist s
	, product p
	, entity e
where s.summary_date = '2017-12-31'
and s.product_name = p.product_name
and p.brand = b.brand
and s.customer_name = e.short_name
group by b.brand, e.channel
)
, channel as (
select  distinct e.channel
from salesumhist s
, entity e
where s.summary_date = '2017-12-31'
and s.customer_name = e.short_name
and s.net_sale is not null
and e.channel is not null
and e.channel not like '%3M'
)
select b.brand, c.channel
	, case when b.net_sale_s is null then 0
		else round(b.net_sale_s/10000, 2)
	  end
from channel c left outer join bchannel b on (c.channel = b.channel)
order by c.channel

```

```{r}
d<-dcast(bc, brand~channel)
d1<-data.matrix(d)
renderD3heatmap({d3heatmap(d1, dendrogram="none",  labRow=d$brand, color=scales::col_quantile("Blues", NULL, n=15), width="50%", length="50%")
})

```

### Brand

```{sql, connection=db, output.var="brand"}
select brand, round(sum(net_sale)/10000, 2)
from salesumhist s
	, product p
where summary_date = '2017-12-31'
and s.product_name = p.product_name
and net_sale is not null
group by brand
order by sum(net_sale) desc
limit 10

```

```{r}
renderWordcloud2({wordcloud2(brand)})

```

```{r}
dbDisconnect(db)

```


